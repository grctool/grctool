name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.23'

jobs:
  # Basic CI checks using lefthook
  ci-checks:
    name: CI Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper diff analysis

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Install lefthook
        run: go install github.com/evilmartians/lefthook@latest

      - name: Install additional tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.60.3
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run CI checks
        run: LEFTHOOK_CONFIG=lefthook-ci.yml lefthook run ci

      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            *.log
            .git/hooks/pre-commit.log

  # Simplified testing - just latest Go on Ubuntu
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run unit tests
        run: |
          # Unit tests - no auth required, uses mocks
          go test -timeout=30s -v ./internal/... ./cmd/... -count=1

      - name: Run integration tests
        run: |
          # Integration tests - VCR recordings, tests auth logic but no live APIs
          go test -tags=integration -timeout=2m -v ./internal/... ./test/integration/... -count=1

  # Performance and quality analysis - DISABLED
  # Commented out - mutation testing and benchmarks need separate setup
  # performance:
  #   name: Performance Analysis
  #   runs-on: ubuntu-latest
  #   needs: ci-checks
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: true
  #
  #     - name: Install lefthook
  #       run: go install github.com/evilmartians/lefthook@latest
  #
  #     - name: Install performance tools
  #       run: |
  #         go install github.com/go-gremlins/gremlins@latest
  #
  #     - name: Run performance tests
  #       run: lefthook --config lefthook-ci.yml run performance
  #
  #     - name: Upload performance results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: performance-results
  #         path: |
  #           benchmarks/
  #           mutation-reports/

  # Coverage analysis - enabled with realistic threshold
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: ci-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: $coverage%"
          # Set realistic threshold at 30% initially, can increase as tests improve
          threshold=30
          if (( $(echo "$coverage < $threshold" | bc -l) )); then
            echo "❌ Coverage $coverage% is below threshold $threshold%"
            exit 1
          fi
          echo "✅ Coverage $coverage% meets threshold $threshold%"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage HTML
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  # License header validation
  license-check:
    name: License Header Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check License Headers
        run: ./scripts/check-license-headers.sh

  # Security analysis - enabled
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install security tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scan
        run: |
          # Run gosec with JSON output for analysis
          gosec -fmt json -out gosec-results.json ./... || true

          # Run with SARIF 2.1.0 format for better GitHub compatibility
          gosec -fmt sarif -out gosec-results.sarif -severity medium ./... || true

          # Validate SARIF file exists and has content
          if [ -f gosec-results.sarif ] && [ -s gosec-results.sarif ]; then
            echo "✓ SARIF file generated successfully"
          else
            echo "⚠ SARIF file is empty or missing, creating placeholder"
            echo '{"version":"2.1.0","runs":[]}' > gosec-results.sarif
          fi

          # Display results summary
          echo "Security scan completed. Check artifacts for detailed results."

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            gosec-results.json
            gosec-results.sarif

      - name: Run secret detection
        run: ./scripts/detect-secrets.sh $(git ls-files)

  # Simple build verification - just Linux amd64
  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    needs: ci-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build for linux/amd64
        run: |
          go build -o build/grctool-linux-amd64 .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: grctool-linux-amd64
          path: build/grctool-linux-amd64

  # Quality gates - comprehensive
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [ci-checks, test-matrix, build-matrix, coverage, license-check, security-scan]
    if: always()
    steps:
      - name: Quality gate check
        run: |
          echo "Checking quality gates..."

          # Check if all required jobs passed
          if [[ "${{ needs.ci-checks.result }}" != "success" ]]; then
            echo "❌ CI checks failed"
            exit 1
          fi

          if [[ "${{ needs.test-matrix.result }}" != "success" ]]; then
            echo "❌ Test matrix failed"
            exit 1
          fi

          if [[ "${{ needs.build-matrix.result }}" != "success" ]]; then
            echo "❌ Build matrix failed"
            exit 1
          fi

          if [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "❌ Coverage check failed"
            exit 1
          fi

          if [[ "${{ needs.license-check.result }}" != "success" ]]; then
            echo "❌ License header check failed"
            exit 1
          fi

          # Security scan is informational only - don't fail on it
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "⚠️  Security scan had issues (non-blocking)"
          fi

          echo "✅ All quality gates passed"
